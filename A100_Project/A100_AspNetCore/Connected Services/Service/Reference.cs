//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Service
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30310-0943")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/ASTI_DTO")]
    public partial class City : object
    {
        
        private int CityIDk__BackingFieldField;
        
        private string CityNamek__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CityID>k__BackingField", IsRequired=true)]
        public int CityIDk__BackingField
        {
            get
            {
                return this.CityIDk__BackingFieldField;
            }
            set
            {
                this.CityIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CityName>k__BackingField", IsRequired=true)]
        public string CityNamek__BackingField
        {
            get
            {
                return this.CityNamek__BackingFieldField;
            }
            set
            {
                this.CityNamek__BackingFieldField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30310-0943")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IService_A100")]
    public interface IService_A100
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService_A100/SendMessage", ReplyAction="http://tempuri.org/IService_A100/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService_A100/GetCityes", ReplyAction="http://tempuri.org/IService_A100/GetCityesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Service.City>> GetCityesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService_A100/GetString", ReplyAction="http://tempuri.org/IService_A100/GetStringResponse")]
        System.Threading.Tasks.Task<string> GetStringAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30310-0943")]
    public interface IService_A100Channel : Service.IService_A100, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30310-0943")]
    public partial class Service_A100Client : System.ServiceModel.ClientBase<Service.IService_A100>, Service.IService_A100
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service_A100Client() : 
                base(Service_A100Client.GetDefaultBinding(), Service_A100Client.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService_A100.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service_A100Client(EndpointConfiguration endpointConfiguration) : 
                base(Service_A100Client.GetBindingForEndpoint(endpointConfiguration), Service_A100Client.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service_A100Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service_A100Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service_A100Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service_A100Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service_A100Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task SendMessageAsync()
        {
            return base.Channel.SendMessageAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Service.City>> GetCityesAsync()
        {
            return base.Channel.GetCityesAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetStringAsync(string name)
        {
            return base.Channel.GetStringAsync(name);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService_A100))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService_A100))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/A100_Service.Services.ASTI/Service_A1" +
                        "00/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Service_A100Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService_A100);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Service_A100Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService_A100);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService_A100,
        }
    }
}
